buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1"
        classpath "gradle.plugin.org.kravemir.gradle.sass:GradleSassPlugin:1.2.2"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.6.1'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.61"
    id "org.asciidoctor.convert" version "2.4.0"
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "com.palantir.docker" version "0.22.1"
    id "io.gitlab.arturbosch.detekt" version "1.3.1"
    id "org.kravemir.gradle.sass" version "1.2.4"
    id "name.remal.check-updates" version "1.0.162"
}


version = "0.0.1-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_11

project.ext.set("snippetsDir", "build/snippets")

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo1.maven.org/maven2/" }
    maven { url = uri "https://repo.spring.io/milestone" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    // dependencies
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}",
                   "org.springframework.boot:spring-boot-starter-cache:${springBootVersion}",
                   "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}",
                   "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}",
                   "org.springframework.boot:spring-boot-starter-security:${springBootVersion}",
                   "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}",
                   "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}",
                   "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
                   "com.fasterxml.jackson.module:jackson-module-kotlin:2.10.+",
                   "com.fasterxml.jackson.core:jackson-databind:2.10.+",
                   "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
                   "org.jetbrains.kotlin:kotlin-reflect",
                   "org.springframework.session:spring-session-core:${springBootVersion}",
                   "org.passay:passay:1.5.0",
                   "commons-beanutils:commons-beanutils:1.9.4",
                   "org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE",
                   "org.webjars:jquery:3.4.1",
                   "org.webjars:popper.js:1.15.0",
                   "org.webjars:bootstrap:4.4.1"
                   // DEV only
                   "org.springframework.boot:spring-boot-devtools"

    runtimeOnly 'org.postgresql:postgresql:42.2.+'

    testImplementation "org.codehaus.groovy:groovy-all:2.5.8",
                       "org.spockframework:spock-core:1.3-groovy-2.5",
                       "org.hamcrest:hamcrest-core:2.+",
                       "org.springframework.restdocs:spring-restdocs-mockmvc",
                       "org.junit.jupiter:junit-jupiter-params:5.5+",
                       "org.junit.jupiter:junit-jupiter-api:5.5+",
                       "io.mockk:mockk:1.9.3",
                       "com.ninja-squad:springmockk:2.0.0",
                       "com.h2database:h2:1.4.+"
    testImplementation ("org.springframework.security:spring-security-test:latest.release") {
        exclude module: "mockito-core"
    }
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(module: "junit")
        exclude(module: "mockito-core")
    }
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5+"

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.3+"
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = sourceCompatibility
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("$buildDir/dependency")
}

docker {
    name "${project.name}"
    dockerfile file('Dockerfile')
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

bootRun {
    sourceResources sourceSets.main
}

springBoot {
    buildInfo()
}

asciidoctor {
    inputs.dir(project.snippetsDir)
    dependsOn(test)
}

detekt {
    version = detektVersion
    input = files("${projectDir}/src/main/kotlin")
    config = files("${projectDir}/detekt.yml") // Code style rules file.
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/detekt/detekt.html")
        }
    }
}

sass {
    main {
        srcDir = file("$projectDir/src/main/scss")
        outDir = file("$projectDir/src/main/resources/public")
        outSubDir = "css"
        registerInSourceSets('main')
        minify = true
    }
}

configure(sass) {
    group = BasePlugin.BUILD_GROUP
    description = "Compile sass and copy output to valid target directory"
}
