allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group = "io.saas"
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        implementation "org.jacoco:org.jacoco.ant:$jacocoVersion"
    }

    jacoco { toolVersion = jacocoVersion }

    jacocoTestReport {

        description = 'Generates a test coverage report for a project'

        sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
        classDirectories.from files(sourceSets.main.output)

        additionalSourceDirs.from files(sourceSets.main.allSource.srcDirs)
        additionalClassDirs.from files(sourceSets.main.output)

        reports {
            xml.enabled = false
            html.enabled = false
        }

        afterEvaluate {
            def exclusionRule = { file -> fileTree(dir: file, excludes: []) }

            sourceDirectories.from files(sourceDirectories.files.collect { exclusionRule(it) })
            classDirectories.from files(classDirectories.files.collect { exclusionRule(it) })

            additionalSourceDirs.from files(additionalSourceDirs.files.collect { exclusionRule(it) })
            additionalClassDirs.from files(additionalClassDirs.files.collect { exclusionRule(it) })
        }
    }
}

def publishedProjects = subprojects.findAll {
    it.name != 'migrations' &&
    it.name != 'frontend'
}

evaluationDependsOnChildren()

task jacocoMerge(type: JacocoMerge) {
    dependsOn publishedProjects.test,  publishedProjects.jacocoTestReport
    doFirst { executionData files(executionData.findAll { it.exists() }) }
    publishedProjects.each { executionData it.tasks.withType(Test) }
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs.from files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(publishedProjects.sourceSets.main.output)
    additionalClassDirs.from files(publishedProjects.sourceSets.main.output)

    executionData.from project.fileTree(".") {
        include("**/build/jacoco/test.exec")
    }

    onlyIf { true }
    doFirst { executionData.from files(executionData.findAll { it.exists() }) }

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
        xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
        html.destination file("${buildDir}/reports/jacoco/html")
        sourceSets sourceSets.main
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                'io.saas.starter.configuration.*',
                '*Test*',
                'io.saas.starter.Application'
            ]
        }
    }
}

jacocoRootReport.dependsOn jacocoTestCoverageVerification
